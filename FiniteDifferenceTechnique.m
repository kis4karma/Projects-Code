%% Finite Difference Technique Part 1% by Sean Hansonclear all;clc;rownum = 15;                               % number of rows and columns (nodes) in matrix in centimetersiterationCount = 40000;                      % number of iterations to converge node difference to 0volt = 50;                                 % voltage for particular nodesvoltrow = 8;                               % row to start adding volt valuevoltcolumn = 8;                            % column to start adding volt valueV_mat = zeros(rownum+2);                   % adds zeros to all nodesfor b =1:5                                 % 'for' loop to add 50 volts to each node  voltcolumn = 8;                         for a = 1:4                            % 'for' loop to add 50 volt to nodes to row/columns    V_mat(voltrow,voltcolumn) = 50;    voltcolumn = voltcolumn + 1;        end    voltrow = voltrow+1;end  for z= 1:iterationCount                     % for loop for iteration counter V_mat_old = V_mat;                          for n = 1:rownum                            % loop that averages the nodes from surrounding nodes    for m = 1:rownum        if n<7 || n>11            V_mat(n+1,m+1)= 1/4 *(V_mat(n,m+1) +V_mat(n+2,m+1)+V_mat(n+1,m) ++V_mat(n+1,m+2));        elseif (m<7 || m>10)            V_mat(n+1,m+1)= 1/4 *(V_mat(n,m+1) +V_mat(n+2,m+1)+V_mat(n+1,m) ++V_mat(n+1,m+2));        end    end     endendouterboxtop = V_mat(2,:);                   %new matrix's for each side of outerboxouterboxbottom= V_mat(16,:);outerboxleft= V_mat(:,2);outerboxright=V_mat(:,16);obt=sum(outerboxtop);                       %summing new matrix's for outerboxobb=sum(outerboxbottom);obl=sum(outerboxleft);obr=sum(outerboxright);totalobt=obt+obb+obl+obr;                   %total voltage of all sides of outerboxaverageobt=(totalobt/18*.01)*(8.987*10^9); %average electrostatic charge per square cm for outerboxaveragepotouter = totalobt/18*.01;         %average voltage potential per square cm for outerboxinnerboxtop = V_mat(8,:);                   %new matrix's for each side of innerboxinnerboxtop = innerboxtop(:,8:14);innerboxbottom = V_mat(13,:);innerboxbottom = innerboxbottom(:,8:14);innerboxleft = V_mat(:,8);innerboxleft = innerboxleft(9:12,:);innerboxright = V_mat(:,14);innerboxright = innerboxright(9:12,:);ibt=sum(innerboxtop);                        %summing new matrix's for innerbox               ibb=sum(innerboxbottom);                   ibl=sum(innerboxleft);                      ibr=sum(innerboxright);                     totalibt=ibt+ibb+ibl+ibr;                   %total voltages on the inner box averageibt=(totalibt/60*.01)*(8.987*10^9); %average electrostatic charge per square cm on the outside of the inner boxaveragepotinner =(totalibt/60*.01);         %average voltage potential per square cm on the outsideV_mat_new = V_mat;Error = (V_mat_new - V_mat_old);            % difference between the old node value and new node valuesurf(V_mat)                                 % graphdisp(V_mat)                                 % displays vector valuesxlabel('columns (cm)')ylabel('rows (cm)')title('ELECTRIC POTENTIAL OF A RECTANGULAR COAX')Error =(sum(sum(Error)));                   % the summation of the difference between iterationsfprintf('At %d iterations the error converges to %d\n\n'  ,iterationCount,Error);fprintf('The average ELECTROSTATIC CHARGE/cm squared on the inner surface of the outer box is -%d C/cm^2\n\n', averageobt);fprintf('The average ELECTROSTATIC CHARGE/cm squared on the outer surface of the inner box is %d C/cm^2\n\n', averageibt);fprintf('The average VOLTAGE POTENTIAL/cm squared on the inner surface of the outer box is -%d V/cm^2\n\n', averagepotouter);fprintf('The average VOLTAGE POTENTIAL/cm squared on the outer surface of the inner box is %d V/cm^2\n\n', averagepotinner);